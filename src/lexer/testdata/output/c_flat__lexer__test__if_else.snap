---
source: src/lexer/test.rs
expression: snapshot_lexing(contents)
---
pub fn main() void {
^^^ Token { kind: Keyword(Pub), lexeme: "pub", span: 0..3 }
    ^^ Token { kind: Keyword(Fn), lexeme: "fn", span: 4..6 }
       ^^^^ Token { kind: Identifier, lexeme: "main", span: 7..11 }
           ^ Token { kind: LeftParen, lexeme: "(", span: 11..12 }
            ^ Token { kind: RightParen, lexeme: ")", span: 12..13 }
              ^^^^ Token { kind: Identifier, lexeme: "void", span: 14..18 }
                   ^ Token { kind: LeftBrace, lexeme: "{", span: 19..20 }
    const value = if true {
    ^^^^^ Token { kind: Keyword(Const), lexeme: "const", span: 25..30 }
          ^^^^^ Token { kind: Identifier, lexeme: "value", span: 31..36 }
                ^ Token { kind: Equal, lexeme: "=", span: 37..38 }
                  ^^ Token { kind: Keyword(If), lexeme: "if", span: 39..41 }
                     ^^^^ Token { kind: Identifier, lexeme: "true", span: 42..46 }
                          ^ Token { kind: LeftBrace, lexeme: "{", span: 47..48 }
        1
        ^ Token { kind: Number, lexeme: "1", span: 57..58 }
    } else {
    ^ Token { kind: RightBrace, lexeme: "}", span: 63..64 }
      ^^^^ Token { kind: Keyword(Else), lexeme: "else", span: 65..69 }
           ^ Token { kind: LeftBrace, lexeme: "{", span: 70..71 }
        2
        ^ Token { kind: Number, lexeme: "2", span: 80..81 }
    };
    ^ Token { kind: RightBrace, lexeme: "}", span: 86..87 }
     ^ Token { kind: Semicolon, lexeme: ";", span: 87..88 }
    println(#"{}"#, value);
    ^^^^^^^ Token { kind: Identifier, lexeme: "println", span: 93..100 }
           ^ Token { kind: LeftParen, lexeme: "(", span: 100..101 }
            ^^^^^^ Token { kind: String, lexeme: "{}", span: 101..107 }
                  ^ Token { kind: Comma, lexeme: ",", span: 107..108 }
                    ^^^^^ Token { kind: Identifier, lexeme: "value", span: 109..114 }
                         ^ Token { kind: RightParen, lexeme: ")", span: 114..115 }
                          ^ Token { kind: Semicolon, lexeme: ";", span: 115..116 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 117..118 }
