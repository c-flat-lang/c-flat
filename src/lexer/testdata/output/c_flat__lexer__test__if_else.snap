---
source: src/lexer/test.rs
expression: snapshot_lexing(contents)
---
pub fn main() void {
^^^ Token { kind: Keyword(Pub), lexeme: "pub", span: 0..3 }
    ^^ Token { kind: Keyword(Fn), lexeme: "fn", span: 4..6 }
       ^^^^ Token { kind: Identifier, lexeme: "main", span: 7..11 }
           ^ Token { kind: LeftParen, lexeme: "(", span: 11..12 }
            ^ Token { kind: RightParen, lexeme: ")", span: 12..13 }
              ^^^^ Token { kind: Identifier, lexeme: "void", span: 14..18 }
                   ^ Token { kind: LeftBrace, lexeme: "{", span: 19..20 }
    const value: s32 = if true {1} else {2};
    ^^^^^ Token { kind: Keyword(Const), lexeme: "const", span: 25..30 }
          ^^^^^ Token { kind: Identifier, lexeme: "value", span: 31..36 }
               ^ Token { kind: Colon, lexeme: ":", span: 36..37 }
                 ^^^ Token { kind: Identifier, lexeme: "s32", span: 38..41 }
                     ^ Token { kind: Equal, lexeme: "=", span: 42..43 }
                       ^^ Token { kind: Keyword(If), lexeme: "if", span: 44..46 }
                          ^^^^ Token { kind: Keyword(True), lexeme: "true", span: 47..51 }
                               ^ Token { kind: LeftBrace, lexeme: "{", span: 52..53 }
                                ^ Token { kind: Number, lexeme: "1", span: 53..54 }
                                 ^ Token { kind: RightBrace, lexeme: "}", span: 54..55 }
                                   ^^^^ Token { kind: Keyword(Else), lexeme: "else", span: 56..60 }
                                        ^ Token { kind: LeftBrace, lexeme: "{", span: 61..62 }
                                         ^ Token { kind: Number, lexeme: "2", span: 62..63 }
                                          ^ Token { kind: RightBrace, lexeme: "}", span: 63..64 }
                                           ^ Token { kind: Semicolon, lexeme: ";", span: 64..65 }
    println(#"{}"#, value);
    ^^^^^^^ Token { kind: Identifier, lexeme: "println", span: 70..77 }
           ^ Token { kind: LeftParen, lexeme: "(", span: 77..78 }
            ^^^^^^ Token { kind: String, lexeme: "{}", span: 78..84 }
                  ^ Token { kind: Comma, lexeme: ",", span: 84..85 }
                    ^^^^^ Token { kind: Identifier, lexeme: "value", span: 86..91 }
                         ^ Token { kind: RightParen, lexeme: ")", span: 91..92 }
                          ^ Token { kind: Semicolon, lexeme: ";", span: 92..93 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 94..95 }
