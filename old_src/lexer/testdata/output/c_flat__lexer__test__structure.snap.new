---
source: src/lexer/test.rs
assertion_line: 47
expression: snapshot_lexing(contents)
---
type Point struct {
^^^^ Token { kind: Keyword(Type), lexeme: "type", span: 0..4 }
     ^^^^^ Token { kind: Identifier, lexeme: "Point", span: 5..10 }
           ^^^^^^ Token { kind: Keyword(Struct), lexeme: "struct", span: 11..17 }
                  ^ Token { kind: LeftBrace, lexeme: "{", span: 18..19 }
    x: s32,
    ^ Token { kind: Identifier, lexeme: "x", span: 24..25 }
     ^ Token { kind: Colon, lexeme: ":", span: 25..26 }
       ^^^ Token { kind: Identifier, lexeme: "s32", span: 27..30 }
          ^ Token { kind: Comma, lexeme: ",", span: 30..31 }
    y: s32,
    ^ Token { kind: Identifier, lexeme: "y", span: 36..37 }
     ^ Token { kind: Colon, lexeme: ":", span: 37..38 }
       ^^^ Token { kind: Identifier, lexeme: "s32", span: 39..42 }
          ^ Token { kind: Comma, lexeme: ",", span: 42..43 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 44..45 }

enum Color {
^^^^ Token { kind: Identifier, lexeme: "enum", span: 47..51 }
     ^^^^^ Token { kind: Identifier, lexeme: "Color", span: 52..57 }
           ^ Token { kind: LeftBrace, lexeme: "{", span: 58..59 }
    Red,
    ^^^ Token { kind: Identifier, lexeme: "Red", span: 64..67 }
       ^ Token { kind: Comma, lexeme: ",", span: 67..68 }
    Green,
    ^^^^^ Token { kind: Identifier, lexeme: "Green", span: 73..78 }
         ^ Token { kind: Comma, lexeme: ",", span: 78..79 }
    Blue,
    ^^^^ Token { kind: Identifier, lexeme: "Blue", span: 84..88 }
        ^ Token { kind: Comma, lexeme: ",", span: 88..89 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 90..91 }

type ArrayList struct {
^^^^ Token { kind: Keyword(Type), lexeme: "type", span: 93..97 }
     ^^^^^^^^^ Token { kind: Identifier, lexeme: "ArrayList", span: 98..107 }
               ^^^^^^ Token { kind: Keyword(Struct), lexeme: "struct", span: 108..114 }
                      ^ Token { kind: LeftBrace, lexeme: "{", span: 115..116 }
    type Iterator struct {
    ^^^^ Token { kind: Keyword(Type), lexeme: "type", span: 121..125 }
         ^^^^^^^^ Token { kind: Identifier, lexeme: "Iterator", span: 126..134 }
                  ^^^^^^ Token { kind: Keyword(Struct), lexeme: "struct", span: 135..141 }
                         ^ Token { kind: LeftBrace, lexeme: "{", span: 142..143 }
        current: s32,
        ^^^^^^^ Token { kind: Identifier, lexeme: "current", span: 152..159 }
               ^ Token { kind: Colon, lexeme: ":", span: 159..160 }
                 ^^^ Token { kind: Identifier, lexeme: "s32", span: 161..164 }
                    ^ Token { kind: Comma, lexeme: ",", span: 164..165 }
        end: s32,
        ^^^ Token { kind: Identifier, lexeme: "end", span: 174..177 }
           ^ Token { kind: Colon, lexeme: ":", span: 177..178 }
             ^^^ Token { kind: Identifier, lexeme: "s32", span: 179..182 }
                ^ Token { kind: Comma, lexeme: ",", span: 182..183 }
    }
    ^ Token { kind: RightBrace, lexeme: "}", span: 188..189 }

    fn iterator(&self) Iterator {
    ^^ Token { kind: Keyword(Fn), lexeme: "fn", span: 195..197 }
       ^^^^^^^^ Token { kind: Identifier, lexeme: "iterator", span: 198..206 }
               ^ Token { kind: LeftParen, lexeme: "(", span: 206..207 }
                ^ Token { kind: InvalidToken, lexeme: "&", span: 207..208 }
                 ^^^^ Token { kind: Identifier, lexeme: "self", span: 208..212 }
                     ^ Token { kind: RightParen, lexeme: ")", span: 212..213 }
                       ^^^^^^^^ Token { kind: Identifier, lexeme: "Iterator", span: 214..222 }
                                ^ Token { kind: LeftBrace, lexeme: "{", span: 223..224 }
        Iterator {
        ^^^^^^^^ Token { kind: Identifier, lexeme: "Iterator", span: 233..241 }
                 ^ Token { kind: LeftBrace, lexeme: "{", span: 242..243 }
            current: 0,
            ^^^^^^^ Token { kind: Identifier, lexeme: "current", span: 256..263 }
                   ^ Token { kind: Colon, lexeme: ":", span: 263..264 }
                     ^ Token { kind: Number, lexeme: "0", span: 265..266 }
                      ^ Token { kind: Comma, lexeme: ",", span: 266..267 }
            end: self.len(),
            ^^^ Token { kind: Identifier, lexeme: "end", span: 280..283 }
               ^ Token { kind: Colon, lexeme: ":", span: 283..284 }
                 ^^^^ Token { kind: Identifier, lexeme: "self", span: 285..289 }
                     ^ Token { kind: Dot, lexeme: ".", span: 289..290 }
                      ^^^ Token { kind: Identifier, lexeme: "len", span: 290..293 }
                         ^ Token { kind: LeftParen, lexeme: "(", span: 293..294 }
                          ^ Token { kind: RightParen, lexeme: ")", span: 294..295 }
                           ^ Token { kind: Comma, lexeme: ",", span: 295..296 }
        }
        ^ Token { kind: RightBrace, lexeme: "}", span: 305..306 }
    }
    ^ Token { kind: RightBrace, lexeme: "}", span: 311..312 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 313..314 }

fn main() void {
^^ Token { kind: Keyword(Fn), lexeme: "fn", span: 316..318 }
   ^^^^ Token { kind: Identifier, lexeme: "main", span: 319..323 }
       ^ Token { kind: LeftParen, lexeme: "(", span: 323..324 }
        ^ Token { kind: RightParen, lexeme: ")", span: 324..325 }
          ^^^^ Token { kind: Identifier, lexeme: "void", span: 326..330 }
               ^ Token { kind: LeftBrace, lexeme: "{", span: 331..332 }
    const a: ArrayList = ArrayList{};
    ^^^^^ Token { kind: Keyword(Const), lexeme: "const", span: 337..342 }
          ^ Token { kind: Identifier, lexeme: "a", span: 343..344 }
           ^ Token { kind: Colon, lexeme: ":", span: 344..345 }
             ^^^^^^^^^ Token { kind: Identifier, lexeme: "ArrayList", span: 346..355 }
                       ^ Token { kind: Equal, lexeme: "=", span: 356..357 }
                         ^^^^^^^^^ Token { kind: Identifier, lexeme: "ArrayList", span: 358..367 }
                                  ^ Token { kind: LeftBrace, lexeme: "{", span: 367..368 }
                                   ^ Token { kind: RightBrace, lexeme: "}", span: 368..369 }
                                    ^ Token { kind: Semicolon, lexeme: ";", span: 369..370 }
    const b: ArrayList.Iterator = a.iterator();
    ^^^^^ Token { kind: Keyword(Const), lexeme: "const", span: 375..380 }
          ^ Token { kind: Identifier, lexeme: "b", span: 381..382 }
           ^ Token { kind: Colon, lexeme: ":", span: 382..383 }
             ^^^^^^^^^ Token { kind: Identifier, lexeme: "ArrayList", span: 384..393 }
                      ^ Token { kind: Dot, lexeme: ".", span: 393..394 }
                       ^^^^^^^^ Token { kind: Identifier, lexeme: "Iterator", span: 394..402 }
                                ^ Token { kind: Equal, lexeme: "=", span: 403..404 }
                                  ^ Token { kind: Identifier, lexeme: "a", span: 405..406 }
                                   ^ Token { kind: Dot, lexeme: ".", span: 406..407 }
                                    ^^^^^^^^ Token { kind: Identifier, lexeme: "iterator", span: 407..415 }
                                            ^ Token { kind: LeftParen, lexeme: "(", span: 415..416 }
                                             ^ Token { kind: RightParen, lexeme: ")", span: 416..417 }
                                              ^ Token { kind: Semicolon, lexeme: ";", span: 417..418 }
    for (i in b) {
    ^^^ Token { kind: Keyword(For), lexeme: "for", span: 423..426 }
        ^ Token { kind: LeftParen, lexeme: "(", span: 427..428 }
         ^ Token { kind: Identifier, lexeme: "i", span: 428..429 }
           ^^ Token { kind: Identifier, lexeme: "in", span: 430..432 }
              ^ Token { kind: Identifier, lexeme: "b", span: 433..434 }
               ^ Token { kind: RightParen, lexeme: ")", span: 434..435 }
                 ^ Token { kind: LeftBrace, lexeme: "{", span: 436..437 }
        println(i);
        ^^^^^^^ Token { kind: Identifier, lexeme: "println", span: 446..453 }
               ^ Token { kind: LeftParen, lexeme: "(", span: 453..454 }
                ^ Token { kind: Identifier, lexeme: "i", span: 454..455 }
                 ^ Token { kind: RightParen, lexeme: ")", span: 455..456 }
                  ^ Token { kind: Semicolon, lexeme: ";", span: 456..457 }
    }
    ^ Token { kind: RightBrace, lexeme: "}", span: 462..463 }
}
^ Token { kind: RightBrace, lexeme: "}", span: 464..465 }
