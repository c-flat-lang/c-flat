<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="4699"><g><title>0x102806793 (1 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0213%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x10284b3ff (1 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0213%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x10284bbef (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0213%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x10287e917 (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0213%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>0x10287babf (1 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0213%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>0x10287ebb3 (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0213%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>0x10284c963 (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0213%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>0x10284c5c7 (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0213%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>0x10283296b (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0213%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>0x102832baf (1 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0213%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>0x102833145 (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0213%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 0.02%)</title><rect x="0.0213%" y="357" width="0.0213%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2713%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0213%" y="341" width="0.0213%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2713%" y="351.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0213%" y="325" width="0.0213%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2713%" y="335.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.02%)</title><rect x="0.0213%" y="309" width="0.0213%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2713%" y="319.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0213%" y="293" width="0.0213%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2713%" y="303.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0213%" y="277" width="0.0213%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2713%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0213%" y="261" width="0.0213%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2713%" y="271.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.02%)</title><rect x="0.0213%" y="245" width="0.0213%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2713%" y="255.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0213%" y="229" width="0.0213%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2713%" y="239.50"></text></g><g><title>libSystem_initializer (1 samples, 0.02%)</title><rect x="0.0213%" y="213" width="0.0213%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2713%" y="223.50"></text></g><g><title>__pthread_init (1 samples, 0.02%)</title><rect x="0.0213%" y="197" width="0.0213%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.2713%" y="207.50"></text></g><g><title>host_info (1 samples, 0.02%)</title><rect x="0.0213%" y="181" width="0.0213%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.2713%" y="191.50"></text></g><g><title>mig_get_reply_port (1 samples, 0.02%)</title><rect x="0.0213%" y="165" width="0.0213%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.2713%" y="175.50"></text></g><g><title>_kernelrpc_mach_port_construct_trap (1 samples, 0.02%)</title><rect x="0.0213%" y="149" width="0.0213%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2713%" y="159.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (2 samples, 0.04%)</title><rect x="0.0213%" y="389" width="0.0426%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="2"/><text x="0.2713%" y="399.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (2 samples, 0.04%)</title><rect x="0.0213%" y="373" width="0.0426%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="2"/><text x="0.2713%" y="383.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.02%)</title><rect x="0.0426%" y="357" width="0.0213%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.2926%" y="367.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="341" width="0.0213%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.2926%" y="351.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="325" width="0.0213%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.2926%" y="335.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="309" width="0.0213%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.2926%" y="319.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="293" width="0.0213%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.2926%" y="303.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="277" width="0.0213%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.2926%" y="287.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="261" width="0.0213%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.2926%" y="271.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="245" width="0.0213%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.2926%" y="255.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0426%" y="229" width="0.0213%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.2926%" y="239.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.02%)</title><rect x="0.0426%" y="213" width="0.0213%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="0.2926%" y="223.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.02%)</title><rect x="0.0426%" y="197" width="0.0213%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="0.2926%" y="207.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.02%)</title><rect x="0.0426%" y="181" width="0.0213%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="0.2926%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.02%)</title><rect x="0.0426%" y="165" width="0.0213%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="1"/><text x="0.2926%" y="175.50"></text></g><g><title>DYLD-STUB$$fcntl (1 samples, 0.02%)</title><rect x="0.0638%" y="341" width="0.0213%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.3138%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.15%)</title><rect x="2.8304%" y="261" width="0.1490%" height="15" fill="rgb(208,69,12)" fg:x="133" fg:w="7"/><text x="3.0804%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.21%)</title><rect x="2.9794%" y="261" width="0.2128%" height="15" fill="rgb(235,93,37)" fg:x="140" fg:w="10"/><text x="3.2294%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.17%)</title><rect x="3.1922%" y="261" width="0.1702%" height="15" fill="rgb(213,116,39)" fg:x="150" fg:w="8"/><text x="3.4422%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="3.3624%" y="261" width="0.0213%" height="15" fill="rgb(222,207,29)" fg:x="158" fg:w="1"/><text x="3.6124%" y="271.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.02%)</title><rect x="3.9370%" y="213" width="0.0213%" height="15" fill="rgb(206,96,30)" fg:x="185" fg:w="1"/><text x="4.1870%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (1 samples, 0.02%)</title><rect x="4.4903%" y="197" width="0.0213%" height="15" fill="rgb(218,138,4)" fg:x="211" fg:w="1"/><text x="4.7403%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="4.7670%" y="181" width="0.0213%" height="15" fill="rgb(250,191,14)" fg:x="224" fg:w="1"/><text x="5.0170%" y="191.50"></text></g><g><title>_platform_memmove (2 samples, 0.04%)</title><rect x="4.7883%" y="181" width="0.0426%" height="15" fill="rgb(239,60,40)" fg:x="225" fg:w="2"/><text x="5.0383%" y="191.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (3 samples, 0.06%)</title><rect x="4.8521%" y="165" width="0.0638%" height="15" fill="rgb(206,27,48)" fg:x="228" fg:w="3"/><text x="5.1021%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (1 samples, 0.02%)</title><rect x="4.8947%" y="149" width="0.0213%" height="15" fill="rgb(225,35,8)" fg:x="230" fg:w="1"/><text x="5.1447%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.02%)</title><rect x="4.8947%" y="133" width="0.0213%" height="15" fill="rgb(250,213,24)" fg:x="230" fg:w="1"/><text x="5.1447%" y="143.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (5 samples, 0.11%)</title><rect x="4.8308%" y="181" width="0.1064%" height="15" fill="rgb(247,123,22)" fg:x="227" fg:w="5"/><text x="5.0808%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (1 samples, 0.02%)</title><rect x="4.9159%" y="165" width="0.0213%" height="15" fill="rgb(231,138,38)" fg:x="231" fg:w="1"/><text x="5.1659%" y="175.50"></text></g><g><title>_platform_memmove (2 samples, 0.04%)</title><rect x="5.0223%" y="165" width="0.0426%" height="15" fill="rgb(231,145,46)" fg:x="236" fg:w="2"/><text x="5.2723%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.06%)</title><rect x="5.2564%" y="149" width="0.0638%" height="15" fill="rgb(251,118,11)" fg:x="247" fg:w="3"/><text x="5.5064%" y="159.50"></text></g><g><title>_nanov2_free (3 samples, 0.06%)</title><rect x="5.2564%" y="133" width="0.0638%" height="15" fill="rgb(217,147,25)" fg:x="247" fg:w="3"/><text x="5.5064%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (2 samples, 0.04%)</title><rect x="5.3203%" y="149" width="0.0426%" height="15" fill="rgb(247,81,37)" fg:x="250" fg:w="2"/><text x="5.5703%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (2 samples, 0.04%)</title><rect x="5.3628%" y="149" width="0.0426%" height="15" fill="rgb(209,12,38)" fg:x="252" fg:w="2"/><text x="5.6128%" y="159.50"></text></g><g><title>_platform_memmove (3 samples, 0.06%)</title><rect x="5.4692%" y="133" width="0.0638%" height="15" fill="rgb(227,1,9)" fg:x="257" fg:w="3"/><text x="5.7192%" y="143.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (10 samples, 0.21%)</title><rect x="5.4054%" y="149" width="0.2128%" height="15" fill="rgb(248,47,43)" fg:x="254" fg:w="10"/><text x="5.6554%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.09%)</title><rect x="5.5331%" y="133" width="0.0851%" height="15" fill="rgb(221,10,30)" fg:x="260" fg:w="4"/><text x="5.7831%" y="143.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (45 samples, 0.96%)</title><rect x="4.9372%" y="181" width="0.9577%" height="15" fill="rgb(210,229,1)" fg:x="232" fg:w="45"/><text x="5.1872%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (39 samples, 0.83%)</title><rect x="5.0649%" y="165" width="0.8300%" height="15" fill="rgb(222,148,37)" fg:x="238" fg:w="39"/><text x="5.3149%" y="175.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (13 samples, 0.28%)</title><rect x="5.6182%" y="149" width="0.2767%" height="15" fill="rgb(234,67,33)" fg:x="264" fg:w="13"/><text x="5.8682%" y="159.50"></text></g><g><title>core::intrinsics::copy::precondition_check (4 samples, 0.09%)</title><rect x="5.8097%" y="133" width="0.0851%" height="15" fill="rgb(247,98,35)" fg:x="273" fg:w="4"/><text x="6.0597%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (18 samples, 0.38%)</title><rect x="6.3631%" y="165" width="0.3831%" height="15" fill="rgb(247,138,52)" fg:x="299" fg:w="18"/><text x="6.6131%" y="175.50"></text></g><g><title>_platform_memmove (4 samples, 0.09%)</title><rect x="8.6614%" y="149" width="0.0851%" height="15" fill="rgb(213,79,30)" fg:x="407" fg:w="4"/><text x="8.9114%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (164 samples, 3.49%)</title><rect x="5.8949%" y="181" width="3.4901%" height="15" fill="rgb(246,177,23)" fg:x="277" fg:w="164"/><text x="6.1449%" y="191.50">all..</text></g><g><title>alloc::collections::btree::node::slice_remove (124 samples, 2.64%)</title><rect x="6.7461%" y="165" width="2.6389%" height="15" fill="rgb(230,62,27)" fg:x="317" fg:w="124"/><text x="6.9961%" y="175.50">al..</text></g><g><title>core::intrinsics::copy::precondition_check (30 samples, 0.64%)</title><rect x="8.7465%" y="149" width="0.6384%" height="15" fill="rgb(216,154,8)" fg:x="411" fg:w="30"/><text x="8.9965%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.04%)</title><rect x="9.3850%" y="181" width="0.0426%" height="15" fill="rgb(244,35,45)" fg:x="441" fg:w="2"/><text x="9.6350%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.02%)</title><rect x="9.5127%" y="165" width="0.0213%" height="15" fill="rgb(251,115,12)" fg:x="447" fg:w="1"/><text x="9.7627%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (271 samples, 5.77%)</title><rect x="3.8519%" y="229" width="5.7672%" height="15" fill="rgb(240,54,50)" fg:x="181" fg:w="271"/><text x="4.1019%" y="239.50">alloc::..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (266 samples, 5.66%)</title><rect x="3.9583%" y="213" width="5.6608%" height="15" fill="rgb(233,84,52)" fg:x="186" fg:w="266"/><text x="4.2083%" y="223.50">alloc::..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (240 samples, 5.11%)</title><rect x="4.5116%" y="197" width="5.1075%" height="15" fill="rgb(207,117,47)" fg:x="212" fg:w="240"/><text x="4.7616%" y="207.50">alloc:..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (9 samples, 0.19%)</title><rect x="9.4275%" y="181" width="0.1915%" height="15" fill="rgb(249,43,39)" fg:x="443" fg:w="9"/><text x="9.6775%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (4 samples, 0.09%)</title><rect x="9.5339%" y="165" width="0.0851%" height="15" fill="rgb(209,38,44)" fg:x="448" fg:w="4"/><text x="9.7839%" y="175.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.11%)</title><rect x="9.6191%" y="229" width="0.1064%" height="15" fill="rgb(236,212,23)" fg:x="452" fg:w="5"/><text x="9.8691%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.21%)</title><rect x="11.0236%" y="213" width="0.2128%" height="15" fill="rgb(242,79,21)" fg:x="518" fg:w="10"/><text x="11.2736%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="11.1939%" y="197" width="0.0426%" height="15" fill="rgb(211,96,35)" fg:x="526" fg:w="2"/><text x="11.4439%" y="207.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (9 samples, 0.19%)</title><rect x="14.5989%" y="197" width="0.1915%" height="15" fill="rgb(253,215,40)" fg:x="686" fg:w="9"/><text x="14.8489%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 3.96%)</title><rect x="14.7904%" y="197" width="3.9583%" height="15" fill="rgb(211,81,21)" fg:x="695" fg:w="186"/><text x="15.0404%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 1.87%)</title><rect x="16.8759%" y="181" width="1.8727%" height="15" fill="rgb(208,190,38)" fg:x="793" fg:w="88"/><text x="17.1259%" y="191.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.15%)</title><rect x="18.7487%" y="197" width="0.1490%" height="15" fill="rgb(235,213,38)" fg:x="881" fg:w="7"/><text x="18.9987%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (32 samples, 0.68%)</title><rect x="18.8976%" y="197" width="0.6810%" height="15" fill="rgb(237,122,38)" fg:x="888" fg:w="32"/><text x="19.1476%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.09%)</title><rect x="19.4935%" y="181" width="0.0851%" height="15" fill="rgb(244,218,35)" fg:x="916" fg:w="4"/><text x="19.7435%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (777 samples, 16.54%)</title><rect x="3.5539%" y="245" width="16.5354%" height="15" fill="rgb(240,68,47)" fg:x="167" fg:w="777"/><text x="3.8039%" y="255.50">alloc::collections::btree:..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (487 samples, 10.36%)</title><rect x="9.7255%" y="229" width="10.3639%" height="15" fill="rgb(210,16,53)" fg:x="457" fg:w="487"/><text x="9.9755%" y="239.50">alloc::collecti..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (416 samples, 8.85%)</title><rect x="11.2364%" y="213" width="8.8529%" height="15" fill="rgb(235,124,12)" fg:x="528" fg:w="416"/><text x="11.4864%" y="223.50">alloc::collec..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (24 samples, 0.51%)</title><rect x="19.5786%" y="197" width="0.5107%" height="15" fill="rgb(224,169,11)" fg:x="920" fg:w="24"/><text x="19.8286%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (788 samples, 16.77%)</title><rect x="3.3837%" y="261" width="16.7695%" height="15" fill="rgb(250,166,2)" fg:x="159" fg:w="788"/><text x="3.6337%" y="271.50">alloc::collections::btree:..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.06%)</title><rect x="20.0894%" y="245" width="0.0638%" height="15" fill="rgb(242,216,29)" fg:x="944" fg:w="3"/><text x="20.3394%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (2 samples, 0.04%)</title><rect x="20.1532%" y="261" width="0.0426%" height="15" fill="rgb(230,116,27)" fg:x="947" fg:w="2"/><text x="20.4032%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (73 samples, 1.55%)</title><rect x="20.1958%" y="261" width="1.5535%" height="15" fill="rgb(228,99,48)" fg:x="949" fg:w="73"/><text x="20.4458%" y="271.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (5 samples, 0.11%)</title><rect x="21.6429%" y="245" width="0.1064%" height="15" fill="rgb(253,11,6)" fg:x="1017" fg:w="5"/><text x="21.8929%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="21.7493%" y="261" width="0.0213%" height="15" fill="rgb(247,143,39)" fg:x="1022" fg:w="1"/><text x="21.9993%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="21.7706%" y="261" width="0.0213%" height="15" fill="rgb(236,97,10)" fg:x="1023" fg:w="1"/><text x="22.0206%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="21.7919%" y="261" width="0.0213%" height="15" fill="rgb(233,208,19)" fg:x="1024" fg:w="1"/><text x="22.0419%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.09%)</title><rect x="21.8132%" y="261" width="0.0851%" height="15" fill="rgb(216,164,2)" fg:x="1025" fg:w="4"/><text x="22.0632%" y="271.50"></text></g><g><title>bitbeat::Process::reset (5 samples, 0.11%)</title><rect x="21.8983%" y="261" width="0.1064%" height="15" fill="rgb(220,129,5)" fg:x="1029" fg:w="5"/><text x="22.1483%" y="271.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (1 samples, 0.02%)</title><rect x="30.4746%" y="213" width="0.0213%" height="15" fill="rgb(242,17,10)" fg:x="1432" fg:w="1"/><text x="30.7246%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (38 samples, 0.81%)</title><rect x="29.7510%" y="245" width="0.8087%" height="15" fill="rgb(242,107,0)" fg:x="1398" fg:w="38"/><text x="30.0010%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (37 samples, 0.79%)</title><rect x="29.7723%" y="229" width="0.7874%" height="15" fill="rgb(251,28,31)" fg:x="1399" fg:w="37"/><text x="30.0223%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.06%)</title><rect x="30.4959%" y="213" width="0.0638%" height="15" fill="rgb(233,223,10)" fg:x="1433" fg:w="3"/><text x="30.7459%" y="223.50"></text></g><g><title>alloc::string::String::as_str (14 samples, 0.30%)</title><rect x="30.5810%" y="229" width="0.2979%" height="15" fill="rgb(215,21,27)" fg:x="1437" fg:w="14"/><text x="30.8310%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (8 samples, 0.17%)</title><rect x="30.7087%" y="213" width="0.1702%" height="15" fill="rgb(232,23,21)" fg:x="1443" fg:w="8"/><text x="30.9587%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (16 samples, 0.34%)</title><rect x="30.5597%" y="245" width="0.3405%" height="15" fill="rgb(244,5,23)" fg:x="1436" fg:w="16"/><text x="30.8097%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="30.8789%" y="229" width="0.0213%" height="15" fill="rgb(226,81,46)" fg:x="1451" fg:w="1"/><text x="31.1289%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.26%)</title><rect x="30.9002%" y="245" width="0.2554%" height="15" fill="rgb(247,70,30)" fg:x="1452" fg:w="12"/><text x="31.1502%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="31.1343%" y="229" width="0.0213%" height="15" fill="rgb(212,68,19)" fg:x="1463" fg:w="1"/><text x="31.3843%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.34%)</title><rect x="31.1556%" y="245" width="0.3405%" height="15" fill="rgb(240,187,13)" fg:x="1464" fg:w="16"/><text x="31.4056%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (28 samples, 0.60%)</title><rect x="31.5599%" y="229" width="0.5959%" height="15" fill="rgb(223,113,26)" fg:x="1483" fg:w="28"/><text x="31.8099%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (18 samples, 0.38%)</title><rect x="31.7727%" y="213" width="0.3831%" height="15" fill="rgb(206,192,2)" fg:x="1493" fg:w="18"/><text x="32.0227%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.68%)</title><rect x="31.4961%" y="245" width="0.6810%" height="15" fill="rgb(241,108,4)" fg:x="1480" fg:w="32"/><text x="31.7461%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="32.1558%" y="229" width="0.0213%" height="15" fill="rgb(247,173,49)" fg:x="1511" fg:w="1"/><text x="32.4058%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.66%)</title><rect x="33.0709%" y="229" width="0.6597%" height="15" fill="rgb(224,114,35)" fg:x="1554" fg:w="31"/><text x="33.3209%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (174 samples, 3.70%)</title><rect x="32.1771%" y="245" width="3.7029%" height="15" fill="rgb(245,159,27)" fg:x="1512" fg:w="174"/><text x="32.4271%" y="255.50">&lt;all..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (101 samples, 2.15%)</title><rect x="33.7306%" y="229" width="2.1494%" height="15" fill="rgb(245,172,44)" fg:x="1585" fg:w="101"/><text x="33.9806%" y="239.50">c..</text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.19%)</title><rect x="35.8800%" y="245" width="0.1915%" height="15" fill="rgb(236,23,11)" fg:x="1686" fg:w="9"/><text x="36.1300%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3 samples, 0.06%)</title><rect x="36.0715%" y="245" width="0.0638%" height="15" fill="rgb(205,117,38)" fg:x="1695" fg:w="3"/><text x="36.3215%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (16 samples, 0.34%)</title><rect x="36.4758%" y="229" width="0.3405%" height="15" fill="rgb(237,72,25)" fg:x="1714" fg:w="16"/><text x="36.7258%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.15%)</title><rect x="36.6674%" y="213" width="0.1490%" height="15" fill="rgb(244,70,9)" fg:x="1723" fg:w="7"/><text x="36.9174%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.06%)</title><rect x="36.8163%" y="229" width="0.0638%" height="15" fill="rgb(217,125,39)" fg:x="1730" fg:w="3"/><text x="37.0663%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.47%)</title><rect x="38.0719%" y="197" width="0.4682%" height="15" fill="rgb(235,36,10)" fg:x="1789" fg:w="22"/><text x="38.3219%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.30%)</title><rect x="38.2422%" y="181" width="0.2979%" height="15" fill="rgb(251,123,47)" fg:x="1797" fg:w="14"/><text x="38.4922%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.09%)</title><rect x="38.5401%" y="197" width="0.0851%" height="15" fill="rgb(221,13,13)" fg:x="1811" fg:w="4"/><text x="38.7901%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (37 samples, 0.79%)</title><rect x="38.6252%" y="197" width="0.7874%" height="15" fill="rgb(238,131,9)" fg:x="1815" fg:w="37"/><text x="38.8752%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="39.3701%" y="181" width="0.0426%" height="15" fill="rgb(211,50,8)" fg:x="1850" fg:w="2"/><text x="39.6201%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (9 samples, 0.19%)</title><rect x="39.5403%" y="165" width="0.1915%" height="15" fill="rgb(245,182,24)" fg:x="1858" fg:w="9"/><text x="39.7903%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.28%)</title><rect x="39.4765%" y="181" width="0.2767%" height="15" fill="rgb(242,14,37)" fg:x="1855" fg:w="13"/><text x="39.7265%" y="191.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (1 samples, 0.02%)</title><rect x="39.7319%" y="165" width="0.0213%" height="15" fill="rgb(246,228,12)" fg:x="1867" fg:w="1"/><text x="39.9819%" y="175.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (17 samples, 0.36%)</title><rect x="39.4126%" y="197" width="0.3618%" height="15" fill="rgb(213,55,15)" fg:x="1852" fg:w="17"/><text x="39.6626%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="39.7531%" y="181" width="0.0213%" height="15" fill="rgb(209,9,3)" fg:x="1868" fg:w="1"/><text x="40.0031%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (190 samples, 4.04%)</title><rect x="36.1353%" y="245" width="4.0434%" height="15" fill="rgb(230,59,30)" fg:x="1698" fg:w="190"/><text x="36.3853%" y="255.50">allo..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (155 samples, 3.30%)</title><rect x="36.8802%" y="229" width="3.2986%" height="15" fill="rgb(209,121,21)" fg:x="1733" fg:w="155"/><text x="37.1302%" y="239.50">all..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (123 samples, 2.62%)</title><rect x="37.5612%" y="213" width="2.6176%" height="15" fill="rgb(220,109,13)" fg:x="1765" fg:w="123"/><text x="37.8112%" y="223.50">al..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (19 samples, 0.40%)</title><rect x="39.7744%" y="197" width="0.4043%" height="15" fill="rgb(232,18,1)" fg:x="1869" fg:w="19"/><text x="40.0244%" y="207.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (17 samples, 0.36%)</title><rect x="39.8170%" y="181" width="0.3618%" height="15" fill="rgb(215,41,42)" fg:x="1871" fg:w="17"/><text x="40.0670%" y="191.50"></text></g><g><title>_platform_memcmp (2 samples, 0.04%)</title><rect x="40.1362%" y="165" width="0.0426%" height="15" fill="rgb(224,123,36)" fg:x="1886" fg:w="2"/><text x="40.3862%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="40.4129%" y="229" width="0.0426%" height="15" fill="rgb(240,125,3)" fg:x="1899" fg:w="2"/><text x="40.6629%" y="239.50"></text></g><g><title>_platform_memmove (5 samples, 0.11%)</title><rect x="40.4554%" y="229" width="0.1064%" height="15" fill="rgb(205,98,50)" fg:x="1901" fg:w="5"/><text x="40.7054%" y="239.50"></text></g><g><title>_platform_memmove (4 samples, 0.09%)</title><rect x="40.7746%" y="213" width="0.0851%" height="15" fill="rgb(205,185,37)" fg:x="1916" fg:w="4"/><text x="41.0246%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.02%)</title><rect x="40.8598%" y="213" width="0.0213%" height="15" fill="rgb(238,207,15)" fg:x="1920" fg:w="1"/><text x="41.1098%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.09%)</title><rect x="40.8810%" y="213" width="0.0851%" height="15" fill="rgb(213,199,42)" fg:x="1921" fg:w="4"/><text x="41.1310%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (8 samples, 0.17%)</title><rect x="42.6048%" y="197" width="0.1702%" height="15" fill="rgb(235,201,11)" fg:x="2002" fg:w="8"/><text x="42.8548%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="42.7325%" y="181" width="0.0426%" height="15" fill="rgb(207,46,11)" fg:x="2008" fg:w="2"/><text x="42.9825%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (8 samples, 0.17%)</title><rect x="44.9670%" y="181" width="0.1702%" height="15" fill="rgb(241,35,35)" fg:x="2113" fg:w="8"/><text x="45.2170%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 5.17%)</title><rect x="45.1373%" y="181" width="5.1713%" height="15" fill="rgb(243,32,47)" fg:x="2121" fg:w="243"/><text x="45.3873%" y="191.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 3.09%)</title><rect x="47.2228%" y="165" width="3.0858%" height="15" fill="rgb(247,202,23)" fg:x="2219" fg:w="145"/><text x="47.4728%" y="175.50">&lt;co..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (9 samples, 0.19%)</title><rect x="50.3086%" y="181" width="0.1915%" height="15" fill="rgb(219,102,11)" fg:x="2364" fg:w="9"/><text x="50.5586%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (26 samples, 0.55%)</title><rect x="50.5001%" y="181" width="0.5533%" height="15" fill="rgb(243,110,44)" fg:x="2373" fg:w="26"/><text x="50.7501%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.09%)</title><rect x="50.9683%" y="165" width="0.0851%" height="15" fill="rgb(222,74,54)" fg:x="2395" fg:w="4"/><text x="51.2183%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (511 samples, 10.87%)</title><rect x="40.5618%" y="229" width="10.8747%" height="15" fill="rgb(216,99,12)" fg:x="1906" fg:w="511"/><text x="40.8118%" y="239.50">alloc::collectio..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (492 samples, 10.47%)</title><rect x="40.9662%" y="213" width="10.4703%" height="15" fill="rgb(226,22,26)" fg:x="1925" fg:w="492"/><text x="41.2162%" y="223.50">alloc::collecti..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (407 samples, 8.66%)</title><rect x="42.7751%" y="197" width="8.6614%" height="15" fill="rgb(217,163,10)" fg:x="2010" fg:w="407"/><text x="43.0251%" y="207.50">alloc::colle..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (18 samples, 0.38%)</title><rect x="51.0534%" y="181" width="0.3831%" height="15" fill="rgb(213,25,53)" fg:x="2399" fg:w="18"/><text x="51.3034%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::into_mut (11 samples, 0.23%)</title><rect x="51.4365%" y="229" width="0.2341%" height="15" fill="rgb(252,105,26)" fg:x="2417" fg:w="11"/><text x="51.6865%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (9 samples, 0.19%)</title><rect x="51.4790%" y="213" width="0.1915%" height="15" fill="rgb(220,39,43)" fg:x="2419" fg:w="9"/><text x="51.7290%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (2 samples, 0.04%)</title><rect x="51.6280%" y="197" width="0.0426%" height="15" fill="rgb(229,68,48)" fg:x="2426" fg:w="2"/><text x="51.8780%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.06%)</title><rect x="51.8408%" y="213" width="0.0638%" height="15" fill="rgb(252,8,32)" fg:x="2436" fg:w="3"/><text x="52.0908%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="52.2877%" y="197" width="0.0426%" height="15" fill="rgb(223,20,43)" fg:x="2457" fg:w="2"/><text x="52.5377%" y="207.50"></text></g><g><title>_platform_memmove (1 samples, 0.02%)</title><rect x="52.3303%" y="197" width="0.0213%" height="15" fill="rgb(229,81,49)" fg:x="2459" fg:w="1"/><text x="52.5803%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.02%)</title><rect x="52.3728%" y="165" width="0.0213%" height="15" fill="rgb(236,28,36)" fg:x="2461" fg:w="1"/><text x="52.6228%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (5 samples, 0.11%)</title><rect x="52.3941%" y="165" width="0.1064%" height="15" fill="rgb(249,185,26)" fg:x="2462" fg:w="5"/><text x="52.6441%" y="175.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.09%)</title><rect x="52.4154%" y="149" width="0.0851%" height="15" fill="rgb(249,174,33)" fg:x="2463" fg:w="4"/><text x="52.6654%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.06%)</title><rect x="52.4367%" y="133" width="0.0638%" height="15" fill="rgb(233,201,37)" fg:x="2464" fg:w="3"/><text x="52.6867%" y="143.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.06%)</title><rect x="52.4367%" y="117" width="0.0638%" height="15" fill="rgb(221,78,26)" fg:x="2464" fg:w="3"/><text x="52.6867%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (18 samples, 0.38%)</title><rect x="52.3516%" y="197" width="0.3831%" height="15" fill="rgb(250,127,30)" fg:x="2460" fg:w="18"/><text x="52.6016%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (18 samples, 0.38%)</title><rect x="52.3516%" y="181" width="0.3831%" height="15" fill="rgb(230,49,44)" fg:x="2460" fg:w="18"/><text x="52.6016%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (11 samples, 0.23%)</title><rect x="52.5005%" y="165" width="0.2341%" height="15" fill="rgb(229,67,23)" fg:x="2467" fg:w="11"/><text x="52.7505%" y="175.50"></text></g><g><title>_platform_memmove (8 samples, 0.17%)</title><rect x="53.2028%" y="181" width="0.1702%" height="15" fill="rgb(249,83,47)" fg:x="2500" fg:w="8"/><text x="53.4528%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (16 samples, 0.34%)</title><rect x="53.9476%" y="165" width="0.3405%" height="15" fill="rgb(215,43,3)" fg:x="2535" fg:w="16"/><text x="54.1976%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (75 samples, 1.60%)</title><rect x="53.3731%" y="181" width="1.5961%" height="15" fill="rgb(238,154,13)" fg:x="2508" fg:w="75"/><text x="53.6231%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (32 samples, 0.68%)</title><rect x="54.2881%" y="165" width="0.6810%" height="15" fill="rgb(219,56,2)" fg:x="2551" fg:w="32"/><text x="54.5381%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.06%)</title><rect x="55.2032%" y="149" width="0.0638%" height="15" fill="rgb(233,0,4)" fg:x="2594" fg:w="3"/><text x="55.4532%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (17 samples, 0.36%)</title><rect x="55.0117%" y="165" width="0.3618%" height="15" fill="rgb(235,30,7)" fg:x="2585" fg:w="17"/><text x="55.2617%" y="175.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (5 samples, 0.11%)</title><rect x="55.2671%" y="149" width="0.1064%" height="15" fill="rgb(250,79,13)" fg:x="2597" fg:w="5"/><text x="55.5171%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.11%)</title><rect x="55.2671%" y="133" width="0.1064%" height="15" fill="rgb(211,146,34)" fg:x="2597" fg:w="5"/><text x="55.5171%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="55.4586%" y="69" width="0.0213%" height="15" fill="rgb(228,22,38)" fg:x="2606" fg:w="1"/><text x="55.7086%" y="79.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (4 samples, 0.09%)</title><rect x="55.4799%" y="69" width="0.0851%" height="15" fill="rgb(235,168,5)" fg:x="2607" fg:w="4"/><text x="55.7299%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.19%)</title><rect x="55.3948%" y="117" width="0.1915%" height="15" fill="rgb(221,155,16)" fg:x="2603" fg:w="9"/><text x="55.6448%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.17%)</title><rect x="55.4160%" y="101" width="0.1702%" height="15" fill="rgb(215,215,53)" fg:x="2604" fg:w="8"/><text x="55.6660%" y="111.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.17%)</title><rect x="55.4160%" y="85" width="0.1702%" height="15" fill="rgb(223,4,10)" fg:x="2604" fg:w="8"/><text x="55.6660%" y="95.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.02%)</title><rect x="55.5650%" y="69" width="0.0213%" height="15" fill="rgb(234,103,6)" fg:x="2611" fg:w="1"/><text x="55.8150%" y="79.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (12 samples, 0.26%)</title><rect x="55.3948%" y="133" width="0.2554%" height="15" fill="rgb(227,97,0)" fg:x="2603" fg:w="12"/><text x="55.6448%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (3 samples, 0.06%)</title><rect x="55.5863%" y="117" width="0.0638%" height="15" fill="rgb(234,150,53)" fg:x="2612" fg:w="3"/><text x="55.8363%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (3 samples, 0.06%)</title><rect x="55.5863%" y="101" width="0.0638%" height="15" fill="rgb(228,201,54)" fg:x="2612" fg:w="3"/><text x="55.8363%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (139 samples, 2.96%)</title><rect x="52.7346%" y="197" width="2.9581%" height="15" fill="rgb(222,22,37)" fg:x="2478" fg:w="139"/><text x="52.9846%" y="207.50">all..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (34 samples, 0.72%)</title><rect x="54.9691%" y="181" width="0.7236%" height="15" fill="rgb(237,53,32)" fg:x="2583" fg:w="34"/><text x="55.2191%" y="191.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (15 samples, 0.32%)</title><rect x="55.3735%" y="165" width="0.3192%" height="15" fill="rgb(233,25,53)" fg:x="2602" fg:w="15"/><text x="55.6235%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (14 samples, 0.30%)</title><rect x="55.3948%" y="149" width="0.2979%" height="15" fill="rgb(210,40,34)" fg:x="2603" fg:w="14"/><text x="55.6448%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="55.6501%" y="133" width="0.0426%" height="15" fill="rgb(241,220,44)" fg:x="2615" fg:w="2"/><text x="55.9001%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.04%)</title><rect x="55.6927%" y="197" width="0.0426%" height="15" fill="rgb(235,28,35)" fg:x="2617" fg:w="2"/><text x="55.9427%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (192 samples, 4.09%)</title><rect x="51.6706%" y="229" width="4.0860%" height="15" fill="rgb(210,56,17)" fg:x="2428" fg:w="192"/><text x="51.9206%" y="239.50">allo..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (181 samples, 3.85%)</title><rect x="51.9047%" y="213" width="3.8519%" height="15" fill="rgb(224,130,29)" fg:x="2439" fg:w="181"/><text x="52.1547%" y="223.50">allo..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.02%)</title><rect x="55.7353%" y="197" width="0.0213%" height="15" fill="rgb(235,212,8)" fg:x="2619" fg:w="1"/><text x="55.9853%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.09%)</title><rect x="55.7565%" y="229" width="0.0851%" height="15" fill="rgb(223,33,50)" fg:x="2620" fg:w="4"/><text x="56.0065%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (737 samples, 15.68%)</title><rect x="40.1788%" y="245" width="15.6842%" height="15" fill="rgb(219,149,13)" fg:x="1888" fg:w="737"/><text x="40.4288%" y="255.50">alloc::collections::btre..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.02%)</title><rect x="55.8417%" y="229" width="0.0213%" height="15" fill="rgb(250,156,29)" fg:x="2624" fg:w="1"/><text x="56.0917%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (2 samples, 0.04%)</title><rect x="55.8629%" y="245" width="0.0426%" height="15" fill="rgb(216,193,19)" fg:x="2625" fg:w="2"/><text x="56.1129%" y="255.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.13%)</title><rect x="55.9055%" y="245" width="0.1277%" height="15" fill="rgb(216,135,14)" fg:x="2627" fg:w="6"/><text x="56.1555%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (9 samples, 0.19%)</title><rect x="56.0332%" y="245" width="0.1915%" height="15" fill="rgb(241,47,5)" fg:x="2633" fg:w="9"/><text x="56.2832%" y="255.50"></text></g><g><title>alloc::string::String::as_str (12 samples, 0.26%)</title><rect x="56.2247%" y="245" width="0.2554%" height="15" fill="rgb(233,42,35)" fg:x="2642" fg:w="12"/><text x="56.4747%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.15%)</title><rect x="56.3311%" y="229" width="0.1490%" height="15" fill="rgb(231,13,6)" fg:x="2647" fg:w="7"/><text x="56.5811%" y="239.50"></text></g><g><title>DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="57.0334%" y="229" width="0.0426%" height="15" fill="rgb(207,181,40)" fg:x="2680" fg:w="2"/><text x="57.2834%" y="239.50"></text></g><g><title>_platform_memmove (4 samples, 0.09%)</title><rect x="57.0760%" y="229" width="0.0851%" height="15" fill="rgb(254,173,49)" fg:x="2682" fg:w="4"/><text x="57.3260%" y="239.50"></text></g><g><title>_realloc (1 samples, 0.02%)</title><rect x="57.4803%" y="197" width="0.0213%" height="15" fill="rgb(221,1,38)" fg:x="2701" fg:w="1"/><text x="57.7303%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.02%)</title><rect x="57.5229%" y="181" width="0.0213%" height="15" fill="rgb(206,124,46)" fg:x="2703" fg:w="1"/><text x="57.7729%" y="191.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.06%)</title><rect x="57.5442%" y="181" width="0.0638%" height="15" fill="rgb(249,21,11)" fg:x="2704" fg:w="3"/><text x="57.7942%" y="191.50"></text></g><g><title>_nanov2_free (1 samples, 0.02%)</title><rect x="57.9059%" y="149" width="0.0213%" height="15" fill="rgb(222,201,40)" fg:x="2721" fg:w="1"/><text x="58.1559%" y="159.50"></text></g><g><title>nanov2_pointer_size (1 samples, 0.02%)</title><rect x="57.9272%" y="149" width="0.0213%" height="15" fill="rgb(235,61,29)" fg:x="2722" fg:w="1"/><text x="58.1772%" y="159.50"></text></g><g><title>_nanov2_free (15 samples, 0.32%)</title><rect x="58.0336%" y="133" width="0.3192%" height="15" fill="rgb(219,207,3)" fg:x="2727" fg:w="15"/><text x="58.2836%" y="143.50"></text></g><g><title>_platform_memmove (5 samples, 0.11%)</title><rect x="58.3528%" y="133" width="0.1064%" height="15" fill="rgb(222,56,46)" fg:x="2742" fg:w="5"/><text x="58.6028%" y="143.50"></text></g><g><title>nanov2_malloc (9 samples, 0.19%)</title><rect x="58.4592%" y="133" width="0.1915%" height="15" fill="rgb(239,76,54)" fg:x="2747" fg:w="9"/><text x="58.7092%" y="143.50"></text></g><g><title>_malloc_zone_realloc (53 samples, 1.13%)</title><rect x="57.8208%" y="165" width="1.1279%" height="15" fill="rgb(231,124,27)" fg:x="2717" fg:w="53"/><text x="58.0708%" y="175.50"></text></g><g><title>nanov2_realloc (47 samples, 1.00%)</title><rect x="57.9485%" y="149" width="1.0002%" height="15" fill="rgb(249,195,6)" fg:x="2723" fg:w="47"/><text x="58.1985%" y="159.50"></text></g><g><title>nanov2_pointer_size (14 samples, 0.30%)</title><rect x="58.6508%" y="133" width="0.2979%" height="15" fill="rgb(237,174,47)" fg:x="2756" fg:w="14"/><text x="58.9008%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (81 samples, 1.72%)</title><rect x="57.2462%" y="213" width="1.7238%" height="15" fill="rgb(206,201,31)" fg:x="2690" fg:w="81"/><text x="57.4962%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (69 samples, 1.47%)</title><rect x="57.5016%" y="197" width="1.4684%" height="15" fill="rgb(231,57,52)" fg:x="2702" fg:w="69"/><text x="57.7516%" y="207.50"></text></g><g><title>_realloc (64 samples, 1.36%)</title><rect x="57.6080%" y="181" width="1.3620%" height="15" fill="rgb(248,177,22)" fg:x="2707" fg:w="64"/><text x="57.8580%" y="191.50"></text></g><g><title>nanov2_size (1 samples, 0.02%)</title><rect x="58.9487%" y="165" width="0.0213%" height="15" fill="rgb(215,211,37)" fg:x="2770" fg:w="1"/><text x="59.1987%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (88 samples, 1.87%)</title><rect x="57.1611%" y="229" width="1.8727%" height="15" fill="rgb(241,128,51)" fg:x="2686" fg:w="88"/><text x="57.4111%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="58.9700%" y="213" width="0.0638%" height="15" fill="rgb(227,165,31)" fg:x="2771" fg:w="3"/><text x="59.2200%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="59.0338%" y="229" width="0.0213%" height="15" fill="rgb(228,167,24)" fg:x="2774" fg:w="1"/><text x="59.2838%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (129 samples, 2.75%)</title><rect x="56.4801%" y="245" width="2.7453%" height="15" fill="rgb(228,143,12)" fg:x="2654" fg:w="129"/><text x="56.7301%" y="255.50">al..</text></g><g><title>core::intrinsics::copy::precondition_check (8 samples, 0.17%)</title><rect x="59.0551%" y="229" width="0.1702%" height="15" fill="rgb(249,149,8)" fg:x="2775" fg:w="8"/><text x="59.3051%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.04%)</title><rect x="59.2254%" y="245" width="0.0426%" height="15" fill="rgb(243,35,44)" fg:x="2783" fg:w="2"/><text x="59.4754%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.13%)</title><rect x="59.2679%" y="245" width="0.1277%" height="15" fill="rgb(246,89,9)" fg:x="2785" fg:w="6"/><text x="59.5179%" y="255.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.06%)</title><rect x="59.3318%" y="229" width="0.0638%" height="15" fill="rgb(233,213,13)" fg:x="2788" fg:w="3"/><text x="59.5818%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (17 samples, 0.36%)</title><rect x="60.1405%" y="213" width="0.3618%" height="15" fill="rgb(233,141,41)" fg:x="2826" fg:w="17"/><text x="60.3905%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="60.4597%" y="197" width="0.0426%" height="15" fill="rgb(239,167,4)" fg:x="2841" fg:w="2"/><text x="60.7097%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.36%)</title><rect x="61.6514%" y="181" width="0.3618%" height="15" fill="rgb(209,217,16)" fg:x="2897" fg:w="17"/><text x="61.9014%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.19%)</title><rect x="61.8217%" y="165" width="0.1915%" height="15" fill="rgb(219,88,35)" fg:x="2905" fg:w="9"/><text x="62.0717%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.11%)</title><rect x="62.0132%" y="181" width="0.1064%" height="15" fill="rgb(220,193,23)" fg:x="2914" fg:w="5"/><text x="62.2632%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (27 samples, 0.57%)</title><rect x="62.1196%" y="181" width="0.5746%" height="15" fill="rgb(230,90,52)" fg:x="2919" fg:w="27"/><text x="62.3696%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.11%)</title><rect x="62.5878%" y="165" width="0.1064%" height="15" fill="rgb(252,106,19)" fg:x="2941" fg:w="5"/><text x="62.8378%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.32%)</title><rect x="62.8219%" y="149" width="0.3192%" height="15" fill="rgb(206,74,20)" fg:x="2952" fg:w="15"/><text x="63.0719%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.45%)</title><rect x="62.7368%" y="165" width="0.4469%" height="15" fill="rgb(230,138,44)" fg:x="2948" fg:w="21"/><text x="62.9868%" y="175.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (2 samples, 0.04%)</title><rect x="63.1411%" y="149" width="0.0426%" height="15" fill="rgb(235,182,43)" fg:x="2967" fg:w="2"/><text x="63.3911%" y="159.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (24 samples, 0.51%)</title><rect x="62.6942%" y="181" width="0.5107%" height="15" fill="rgb(242,16,51)" fg:x="2946" fg:w="24"/><text x="62.9442%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="63.1837%" y="165" width="0.0213%" height="15" fill="rgb(248,9,4)" fg:x="2969" fg:w="1"/><text x="63.4337%" y="175.50"></text></g><g><title>DYLD-STUB$$memcmp (4 samples, 0.09%)</title><rect x="63.4390%" y="149" width="0.0851%" height="15" fill="rgb(210,31,22)" fg:x="2981" fg:w="4"/><text x="63.6890%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (198 samples, 4.21%)</title><rect x="59.4807%" y="229" width="4.2137%" height="15" fill="rgb(239,54,39)" fg:x="2795" fg:w="198"/><text x="59.7307%" y="239.50">alloc..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (150 samples, 3.19%)</title><rect x="60.5022%" y="213" width="3.1922%" height="15" fill="rgb(230,99,41)" fg:x="2843" fg:w="150"/><text x="60.7522%" y="223.50">all..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (128 samples, 2.72%)</title><rect x="60.9704%" y="197" width="2.7240%" height="15" fill="rgb(253,106,12)" fg:x="2865" fg:w="128"/><text x="61.2204%" y="207.50">al..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (23 samples, 0.49%)</title><rect x="63.2049%" y="181" width="0.4895%" height="15" fill="rgb(213,46,41)" fg:x="2970" fg:w="23"/><text x="63.4549%" y="191.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (23 samples, 0.49%)</title><rect x="63.2049%" y="165" width="0.4895%" height="15" fill="rgb(215,133,35)" fg:x="2970" fg:w="23"/><text x="63.4549%" y="175.50"></text></g><g><title>_platform_memcmp (8 samples, 0.17%)</title><rect x="63.5242%" y="149" width="0.1702%" height="15" fill="rgb(213,28,5)" fg:x="2985" fg:w="8"/><text x="63.7742%" y="159.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.06%)</title><rect x="63.6944%" y="229" width="0.0638%" height="15" fill="rgb(215,77,49)" fg:x="2993" fg:w="3"/><text x="63.9444%" y="239.50"></text></g><g><title>bitbeat::Module::get_function (231 samples, 4.92%)</title><rect x="59.3956%" y="245" width="4.9159%" height="15" fill="rgb(248,100,22)" fg:x="2791" fg:w="231"/><text x="59.6456%" y="255.50">bitbea..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (26 samples, 0.55%)</title><rect x="63.7582%" y="229" width="0.5533%" height="15" fill="rgb(208,67,9)" fg:x="2996" fg:w="26"/><text x="64.0082%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.51%)</title><rect x="63.8008%" y="213" width="0.5107%" height="15" fill="rgb(219,133,21)" fg:x="2998" fg:w="24"/><text x="64.0508%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="64.2903%" y="197" width="0.0213%" height="15" fill="rgb(246,46,29)" fg:x="3021" fg:w="1"/><text x="64.5403%" y="207.50"></text></g><g><title>bitbeat::Process::handle_add (2 samples, 0.04%)</title><rect x="64.3116%" y="245" width="0.0426%" height="15" fill="rgb(246,185,52)" fg:x="3022" fg:w="2"/><text x="64.5616%" y="255.50"></text></g><g><title>bitbeat::Process::handle_cmp_le (7 samples, 0.15%)</title><rect x="64.3541%" y="245" width="0.1490%" height="15" fill="rgb(252,136,11)" fg:x="3024" fg:w="7"/><text x="64.6041%" y="255.50"></text></g><g><title>bitbeat::Process::handle_halt (2 samples, 0.04%)</title><rect x="64.5031%" y="245" width="0.0426%" height="15" fill="rgb(219,138,53)" fg:x="3031" fg:w="2"/><text x="64.7531%" y="255.50"></text></g><g><title>bitbeat::Process::handle_jump_if (26 samples, 0.55%)</title><rect x="64.5456%" y="245" width="0.5533%" height="15" fill="rgb(211,51,23)" fg:x="3033" fg:w="26"/><text x="64.7956%" y="255.50"></text></g><g><title>bitbeat::Process::handle_load_imm (7 samples, 0.15%)</title><rect x="65.0990%" y="245" width="0.1490%" height="15" fill="rgb(247,221,28)" fg:x="3059" fg:w="7"/><text x="65.3490%" y="255.50"></text></g><g><title>bitbeat::Process::handle_recv (48 samples, 1.02%)</title><rect x="65.2479%" y="245" width="1.0215%" height="15" fill="rgb(251,222,45)" fg:x="3066" fg:w="48"/><text x="65.4979%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (28 samples, 0.60%)</title><rect x="65.6735%" y="229" width="0.5959%" height="15" fill="rgb(217,162,53)" fg:x="3086" fg:w="28"/><text x="65.9235%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="66.2481%" y="213" width="0.0213%" height="15" fill="rgb(229,93,14)" fg:x="3113" fg:w="1"/><text x="66.4981%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.28%)</title><rect x="66.8014%" y="229" width="0.2767%" height="15" fill="rgb(209,67,49)" fg:x="3139" fg:w="13"/><text x="67.0514%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (10 samples, 0.21%)</title><rect x="66.8653%" y="213" width="0.2128%" height="15" fill="rgb(213,87,29)" fg:x="3142" fg:w="10"/><text x="67.1153%" y="223.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.06%)</title><rect x="67.0143%" y="197" width="0.0638%" height="15" fill="rgb(205,151,52)" fg:x="3149" fg:w="3"/><text x="67.2643%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (9 samples, 0.19%)</title><rect x="67.5250%" y="213" width="0.1915%" height="15" fill="rgb(253,215,39)" fg:x="3173" fg:w="9"/><text x="67.7750%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.11%)</title><rect x="67.6101%" y="197" width="0.1064%" height="15" fill="rgb(221,220,41)" fg:x="3177" fg:w="5"/><text x="67.8601%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.04%)</title><rect x="67.7165%" y="213" width="0.0426%" height="15" fill="rgb(218,133,21)" fg:x="3182" fg:w="2"/><text x="67.9665%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (13 samples, 0.28%)</title><rect x="69.1211%" y="197" width="0.2767%" height="15" fill="rgb(221,193,43)" fg:x="3248" fg:w="13"/><text x="69.3711%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="69.3765%" y="181" width="0.0213%" height="15" fill="rgb(240,128,52)" fg:x="3260" fg:w="1"/><text x="69.6265%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (6 samples, 0.13%)</title><rect x="72.3133%" y="181" width="0.1277%" height="15" fill="rgb(253,114,12)" fg:x="3398" fg:w="6"/><text x="72.5633%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 4.26%)</title><rect x="72.4409%" y="181" width="4.2562%" height="15" fill="rgb(215,223,47)" fg:x="3404" fg:w="200"/><text x="72.6909%" y="191.50">&lt;core..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.94%)</title><rect x="74.7606%" y="165" width="1.9366%" height="15" fill="rgb(248,225,23)" fg:x="3513" fg:w="91"/><text x="75.0106%" y="175.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (12 samples, 0.26%)</title><rect x="76.6972%" y="181" width="0.2554%" height="15" fill="rgb(250,108,0)" fg:x="3604" fg:w="12"/><text x="76.9472%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (29 samples, 0.62%)</title><rect x="76.9525%" y="181" width="0.6172%" height="15" fill="rgb(228,208,7)" fg:x="3616" fg:w="29"/><text x="77.2025%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.11%)</title><rect x="77.4633%" y="165" width="0.1064%" height="15" fill="rgb(244,45,10)" fg:x="3640" fg:w="5"/><text x="77.7133%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (514 samples, 10.94%)</title><rect x="67.0781%" y="229" width="10.9385%" height="15" fill="rgb(207,125,25)" fg:x="3152" fg:w="514"/><text x="67.3281%" y="239.50">alloc::collectio..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (482 samples, 10.26%)</title><rect x="67.7591%" y="213" width="10.2575%" height="15" fill="rgb(210,195,18)" fg:x="3184" fg:w="482"/><text x="68.0091%" y="223.50">alloc::collecti..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (405 samples, 8.62%)</title><rect x="69.3977%" y="197" width="8.6189%" height="15" fill="rgb(249,80,12)" fg:x="3261" fg:w="405"/><text x="69.6477%" y="207.50">alloc::colle..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (21 samples, 0.45%)</title><rect x="77.5697%" y="181" width="0.4469%" height="15" fill="rgb(221,65,9)" fg:x="3645" fg:w="21"/><text x="77.8197%" y="191.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.04%)</title><rect x="78.0166%" y="229" width="0.0426%" height="15" fill="rgb(235,49,36)" fg:x="3666" fg:w="2"/><text x="78.2666%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (55 samples, 1.17%)</title><rect x="78.0592%" y="229" width="1.1705%" height="15" fill="rgb(225,32,20)" fg:x="3668" fg:w="55"/><text x="78.3092%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.02%)</title><rect x="79.2296%" y="229" width="0.0213%" height="15" fill="rgb(215,141,46)" fg:x="3723" fg:w="1"/><text x="79.4796%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (21 samples, 0.45%)</title><rect x="79.2509%" y="229" width="0.4469%" height="15" fill="rgb(250,160,47)" fg:x="3724" fg:w="21"/><text x="79.5009%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (17 samples, 0.36%)</title><rect x="79.3360%" y="213" width="0.3618%" height="15" fill="rgb(216,222,40)" fg:x="3728" fg:w="17"/><text x="79.5860%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="79.6978%" y="229" width="0.0213%" height="15" fill="rgb(234,217,39)" fg:x="3745" fg:w="1"/><text x="79.9478%" y="239.50"></text></g><g><title>bitbeat::Process::handle_send (636 samples, 13.53%)</title><rect x="66.2694%" y="245" width="13.5348%" height="15" fill="rgb(207,178,40)" fg:x="3114" fg:w="636"/><text x="66.5194%" y="255.50">bitbeat::Process::ha..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (4 samples, 0.09%)</title><rect x="79.7191%" y="229" width="0.0851%" height="15" fill="rgb(221,136,13)" fg:x="3746" fg:w="4"/><text x="79.9691%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.04%)</title><rect x="79.7617%" y="213" width="0.0426%" height="15" fill="rgb(249,199,10)" fg:x="3748" fg:w="2"/><text x="80.0117%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="79.7829%" y="197" width="0.0213%" height="15" fill="rgb(249,222,13)" fg:x="3749" fg:w="1"/><text x="80.0329%" y="207.50"></text></g><g><title>bitbeat::Process::handle_sub (12 samples, 0.26%)</title><rect x="79.8042%" y="245" width="0.2554%" height="15" fill="rgb(244,185,38)" fg:x="3750" fg:w="12"/><text x="80.0542%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 1.62%)</title><rect x="81.3365%" y="229" width="1.6174%" height="15" fill="rgb(236,202,9)" fg:x="3822" fg:w="76"/><text x="81.5865%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.79%)</title><rect x="82.1664%" y="213" width="0.7874%" height="15" fill="rgb(250,229,37)" fg:x="3861" fg:w="37"/><text x="82.4164%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (2 samples, 0.04%)</title><rect x="82.9538%" y="229" width="0.0426%" height="15" fill="rgb(206,174,23)" fg:x="3898" fg:w="2"/><text x="83.2038%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (1 samples, 0.02%)</title><rect x="82.9751%" y="213" width="0.0213%" height="15" fill="rgb(211,33,43)" fg:x="3899" fg:w="1"/><text x="83.2251%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (1 samples, 0.02%)</title><rect x="82.9964%" y="229" width="0.0213%" height="15" fill="rgb(245,58,50)" fg:x="3900" fg:w="1"/><text x="83.2464%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T (4 samples, 0.09%)</title><rect x="83.0177%" y="229" width="0.0851%" height="15" fill="rgb(244,68,36)" fg:x="3901" fg:w="4"/><text x="83.2677%" y="239.50"></text></g><g><title> N]&gt;::index_mut (4 samples, 0.09%)</title><rect x="83.0177%" y="213" width="0.0851%" height="15" fill="rgb(232,229,15)" fg:x="3901" fg:w="4"/><text x="83.2677%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="83.0815%" y="197" width="0.0213%" height="15" fill="rgb(254,30,23)" fg:x="3904" fg:w="1"/><text x="83.3315%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.02%)</title><rect x="83.1028%" y="229" width="0.0213%" height="15" fill="rgb(235,160,14)" fg:x="3905" fg:w="1"/><text x="83.3528%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (17 samples, 0.36%)</title><rect x="83.1241%" y="229" width="0.3618%" height="15" fill="rgb(212,155,44)" fg:x="3906" fg:w="17"/><text x="83.3741%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.34%)</title><rect x="83.1454%" y="213" width="0.3405%" height="15" fill="rgb(226,2,50)" fg:x="3907" fg:w="16"/><text x="83.3954%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::fill (341 samples, 7.26%)</title><rect x="83.4858%" y="229" width="7.2569%" height="15" fill="rgb(234,177,6)" fg:x="3923" fg:w="341"/><text x="83.7358%" y="239.50">core::slic..</text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (337 samples, 7.17%)</title><rect x="83.5710%" y="213" width="7.1717%" height="15" fill="rgb(217,24,9)" fg:x="3927" fg:w="337"/><text x="83.8210%" y="223.50">&lt;[T] as co..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 5.62%)</title><rect x="85.1245%" y="197" width="5.6182%" height="15" fill="rgb(220,13,46)" fg:x="4000" fg:w="264"/><text x="85.3745%" y="207.50">&lt;core::..</text></g><g><title>bitbeat::Process::reset (506 samples, 10.77%)</title><rect x="80.0596%" y="245" width="10.7682%" height="15" fill="rgb(239,221,27)" fg:x="3762" fg:w="506"/><text x="80.3096%" y="255.50">bitbeat::Process..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.09%)</title><rect x="90.7427%" y="229" width="0.0851%" height="15" fill="rgb(222,198,25)" fg:x="4264" fg:w="4"/><text x="90.9927%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.09%)</title><rect x="90.7427%" y="213" width="0.0851%" height="15" fill="rgb(211,99,13)" fg:x="4264" fg:w="4"/><text x="90.9927%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (18 samples, 0.38%)</title><rect x="90.8278%" y="245" width="0.3831%" height="15" fill="rgb(232,111,31)" fg:x="4268" fg:w="18"/><text x="91.0778%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (15 samples, 0.32%)</title><rect x="90.8917%" y="229" width="0.3192%" height="15" fill="rgb(245,82,37)" fg:x="4271" fg:w="15"/><text x="91.1417%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (3 samples, 0.06%)</title><rect x="91.1471%" y="213" width="0.0638%" height="15" fill="rgb(227,149,46)" fg:x="4283" fg:w="3"/><text x="91.3971%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="91.3386%" y="213" width="0.0213%" height="15" fill="rgb(218,36,50)" fg:x="4292" fg:w="1"/><text x="91.5886%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (51 samples, 1.09%)</title><rect x="91.8493%" y="149" width="1.0853%" height="15" fill="rgb(226,80,48)" fg:x="4316" fg:w="51"/><text x="92.0993%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 1.02%)</title><rect x="91.9132%" y="133" width="1.0215%" height="15" fill="rgb(238,224,15)" fg:x="4319" fg:w="48"/><text x="92.1632%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (14 samples, 0.30%)</title><rect x="92.6367%" y="117" width="0.2979%" height="15" fill="rgb(241,136,10)" fg:x="4353" fg:w="14"/><text x="92.8867%" y="127.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (3 samples, 0.06%)</title><rect x="92.8708%" y="101" width="0.0638%" height="15" fill="rgb(208,32,45)" fg:x="4364" fg:w="3"/><text x="93.1208%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15 samples, 0.32%)</title><rect x="92.9347%" y="149" width="0.3192%" height="15" fill="rgb(207,135,9)" fg:x="4367" fg:w="15"/><text x="93.1847%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (5 samples, 0.11%)</title><rect x="93.9774%" y="101" width="0.1064%" height="15" fill="rgb(206,86,44)" fg:x="4416" fg:w="5"/><text x="94.2274%" y="111.50"></text></g><g><title>bitbeat::Process::step::_{{closure}} (3 samples, 0.06%)</title><rect x="94.0200%" y="85" width="0.0638%" height="15" fill="rgb(245,177,15)" fg:x="4418" fg:w="3"/><text x="94.2700%" y="95.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.04%)</title><rect x="94.0838%" y="101" width="0.0426%" height="15" fill="rgb(206,64,50)" fg:x="4421" fg:w="2"/><text x="94.3338%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;bitbeat::Reg,i64,(),bitbeat::Process::step::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;bitbeat::Reg&gt;,bitbeat::Process::step::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (14 samples, 0.30%)</title><rect x="94.1264%" y="101" width="0.2979%" height="15" fill="rgb(234,36,40)" fg:x="4423" fg:w="14"/><text x="94.3764%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;bitbeat::Reg&gt;,bitbeat::Process::step::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (12 samples, 0.26%)</title><rect x="94.1690%" y="85" width="0.2554%" height="15" fill="rgb(213,64,8)" fg:x="4425" fg:w="12"/><text x="94.4190%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;bitbeat::Reg&gt;,bitbeat::Process::step::{{closure}}&gt;&gt;::{{closure}}&gt; (8 samples, 0.17%)</title><rect x="94.2541%" y="69" width="0.1702%" height="15" fill="rgb(210,75,36)" fg:x="4429" fg:w="8"/><text x="94.5041%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (4 samples, 0.09%)</title><rect x="94.3392%" y="53" width="0.0851%" height="15" fill="rgb(229,88,21)" fg:x="4433" fg:w="4"/><text x="94.5892%" y="63.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="94.3818%" y="37" width="0.0426%" height="15" fill="rgb(252,204,47)" fg:x="4435" fg:w="2"/><text x="94.6318%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (142 samples, 3.02%)</title><rect x="91.6152%" y="181" width="3.0219%" height="15" fill="rgb(208,77,27)" fg:x="4305" fg:w="142"/><text x="91.8652%" y="191.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (140 samples, 2.98%)</title><rect x="91.6578%" y="165" width="2.9794%" height="15" fill="rgb(221,76,26)" fg:x="4307" fg:w="140"/><text x="91.9078%" y="175.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (65 samples, 1.38%)</title><rect x="93.2539%" y="149" width="1.3833%" height="15" fill="rgb(225,139,18)" fg:x="4382" fg:w="65"/><text x="93.5039%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 1.38%)</title><rect x="93.2539%" y="133" width="1.3833%" height="15" fill="rgb(230,137,11)" fg:x="4382" fg:w="65"/><text x="93.5039%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61 samples, 1.30%)</title><rect x="93.3390%" y="117" width="1.2981%" height="15" fill="rgb(212,28,1)" fg:x="4386" fg:w="61"/><text x="93.5890%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (10 samples, 0.21%)</title><rect x="94.4243%" y="101" width="0.2128%" height="15" fill="rgb(248,164,17)" fg:x="4437" fg:w="10"/><text x="94.6743%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (5 samples, 0.11%)</title><rect x="94.5308%" y="85" width="0.1064%" height="15" fill="rgb(222,171,42)" fg:x="4442" fg:w="5"/><text x="94.7808%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.57%)</title><rect x="94.6372%" y="181" width="0.5746%" height="15" fill="rgb(243,84,45)" fg:x="4447" fg:w="27"/><text x="94.8872%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (26 samples, 0.55%)</title><rect x="94.6584%" y="165" width="0.5533%" height="15" fill="rgb(252,49,23)" fg:x="4448" fg:w="26"/><text x="94.9084%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (15 samples, 0.32%)</title><rect x="94.8925%" y="149" width="0.3192%" height="15" fill="rgb(215,19,7)" fg:x="4459" fg:w="15"/><text x="95.1425%" y="159.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (2 samples, 0.04%)</title><rect x="95.1692%" y="133" width="0.0426%" height="15" fill="rgb(238,81,41)" fg:x="4472" fg:w="2"/><text x="95.4192%" y="143.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="95.4884%" y="149" width="0.0213%" height="15" fill="rgb(210,199,37)" fg:x="4487" fg:w="1"/><text x="95.7384%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.02%)</title><rect x="95.5097%" y="149" width="0.0213%" height="15" fill="rgb(244,192,49)" fg:x="4488" fg:w="1"/><text x="95.7597%" y="159.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.15%)</title><rect x="95.5310%" y="149" width="0.1490%" height="15" fill="rgb(226,211,11)" fg:x="4489" fg:w="7"/><text x="95.7810%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (23 samples, 0.49%)</title><rect x="95.3394%" y="165" width="0.4895%" height="15" fill="rgb(236,162,54)" fg:x="4480" fg:w="23"/><text x="95.5894%" y="175.50"></text></g><g><title>nanov2_malloc_type (7 samples, 0.15%)</title><rect x="95.6799%" y="149" width="0.1490%" height="15" fill="rgb(220,229,9)" fg:x="4496" fg:w="7"/><text x="95.9299%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (30 samples, 0.64%)</title><rect x="95.2117%" y="181" width="0.6384%" height="15" fill="rgb(250,87,22)" fg:x="4474" fg:w="30"/><text x="95.4617%" y="191.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="95.8289%" y="165" width="0.0213%" height="15" fill="rgb(239,43,17)" fg:x="4503" fg:w="1"/><text x="96.0789%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (219 samples, 4.66%)</title><rect x="91.2109%" y="245" width="4.6606%" height="15" fill="rgb(231,177,25)" fg:x="4286" fg:w="219"/><text x="91.4609%" y="255.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (215 samples, 4.58%)</title><rect x="91.2960%" y="229" width="4.5754%" height="15" fill="rgb(219,179,1)" fg:x="4290" fg:w="215"/><text x="91.5460%" y="239.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (212 samples, 4.51%)</title><rect x="91.3599%" y="213" width="4.5116%" height="15" fill="rgb(238,219,53)" fg:x="4293" fg:w="212"/><text x="91.6099%" y="223.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (210 samples, 4.47%)</title><rect x="91.4024%" y="197" width="4.4690%" height="15" fill="rgb(232,167,36)" fg:x="4295" fg:w="210"/><text x="91.6524%" y="207.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="95.8502%" y="181" width="0.0213%" height="15" fill="rgb(244,19,51)" fg:x="4504" fg:w="1"/><text x="96.1002%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (26 samples, 0.55%)</title><rect x="95.8715%" y="245" width="0.5533%" height="15" fill="rgb(224,6,22)" fg:x="4505" fg:w="26"/><text x="96.1215%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.55%)</title><rect x="95.8715%" y="229" width="0.5533%" height="15" fill="rgb(224,145,5)" fg:x="4505" fg:w="26"/><text x="96.1215%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.4673%" y="229" width="0.0213%" height="15" fill="rgb(234,130,49)" fg:x="4533" fg:w="1"/><text x="96.7173%" y="239.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="96.5737%" y="197" width="0.0426%" height="15" fill="rgb(254,6,2)" fg:x="4538" fg:w="2"/><text x="96.8237%" y="207.50"></text></g><g><title>__bzero (1 samples, 0.02%)</title><rect x="96.8504%" y="181" width="0.0213%" height="15" fill="rgb(208,96,46)" fg:x="4551" fg:w="1"/><text x="97.1004%" y="191.50"></text></g><g><title>_nanov2_free (15 samples, 0.32%)</title><rect x="96.6163%" y="197" width="0.3192%" height="15" fill="rgb(239,3,39)" fg:x="4540" fg:w="15"/><text x="96.8663%" y="207.50"></text></g><g><title>_platform_memset (3 samples, 0.06%)</title><rect x="96.8717%" y="181" width="0.0638%" height="15" fill="rgb(233,210,1)" fg:x="4552" fg:w="3"/><text x="97.1217%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (40 samples, 0.85%)</title><rect x="96.4248%" y="245" width="0.8512%" height="15" fill="rgb(244,137,37)" fg:x="4531" fg:w="40"/><text x="96.6748%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (37 samples, 0.79%)</title><rect x="96.4886%" y="229" width="0.7874%" height="15" fill="rgb(240,136,2)" fg:x="4534" fg:w="37"/><text x="96.7386%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.74%)</title><rect x="96.5312%" y="213" width="0.7448%" height="15" fill="rgb(239,18,37)" fg:x="4536" fg:w="35"/><text x="96.7812%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16 samples, 0.34%)</title><rect x="96.9355%" y="197" width="0.3405%" height="15" fill="rgb(218,185,22)" fg:x="4555" fg:w="16"/><text x="97.1855%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (6 samples, 0.13%)</title><rect x="97.2760%" y="245" width="0.1277%" height="15" fill="rgb(225,218,4)" fg:x="4571" fg:w="6"/><text x="97.5260%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.02%)</title><rect x="97.3824%" y="229" width="0.0213%" height="15" fill="rgb(230,182,32)" fg:x="4576" fg:w="1"/><text x="97.6324%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="97.3824%" y="213" width="0.0213%" height="15" fill="rgb(242,56,43)" fg:x="4576" fg:w="1"/><text x="97.6324%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (9 samples, 0.19%)</title><rect x="97.4037%" y="245" width="0.1915%" height="15" fill="rgb(233,99,24)" fg:x="4577" fg:w="9"/><text x="97.6537%" y="255.50"></text></g><g><title>bitbeat::Process::step (3,558 samples, 75.72%)</title><rect x="22.0047%" y="261" width="75.7182%" height="15" fill="rgb(234,209,42)" fg:x="1034" fg:w="3558"/><text x="22.2547%" y="271.50">bitbeat::Process::step</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (6 samples, 0.13%)</title><rect x="97.5952%" y="245" width="0.1277%" height="15" fill="rgb(227,7,12)" fg:x="4586" fg:w="6"/><text x="97.8452%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.11%)</title><rect x="97.6165%" y="229" width="0.1064%" height="15" fill="rgb(245,203,43)" fg:x="4587" fg:w="5"/><text x="97.8665%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (32 samples, 0.68%)</title><rect x="97.7229%" y="261" width="0.6810%" height="15" fill="rgb(238,205,33)" fg:x="4592" fg:w="32"/><text x="97.9729%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (26 samples, 0.55%)</title><rect x="97.8506%" y="245" width="0.5533%" height="15" fill="rgb(231,56,7)" fg:x="4598" fg:w="26"/><text x="98.1006%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (2 samples, 0.04%)</title><rect x="98.3614%" y="229" width="0.0426%" height="15" fill="rgb(244,186,29)" fg:x="4622" fg:w="2"/><text x="98.6114%" y="239.50"></text></g><g><title>core::cmp::PartialEq::ne (30 samples, 0.64%)</title><rect x="98.4039%" y="261" width="0.6384%" height="15" fill="rgb(234,111,31)" fg:x="4624" fg:w="30"/><text x="98.6539%" y="271.50"></text></g><g><title>&lt;bitbeat::ProcessState as core::cmp::PartialEq&gt;::eq (19 samples, 0.40%)</title><rect x="98.6380%" y="245" width="0.4043%" height="15" fill="rgb(241,149,10)" fg:x="4635" fg:w="19"/><text x="98.8880%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (16 samples, 0.34%)</title><rect x="99.0423%" y="261" width="0.3405%" height="15" fill="rgb(249,206,44)" fg:x="4654" fg:w="16"/><text x="99.2923%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.30%)</title><rect x="99.0849%" y="245" width="0.2979%" height="15" fill="rgb(251,153,30)" fg:x="4656" fg:w="14"/><text x="99.3349%" y="255.50"></text></g><g><title>bitbeat::Machine::run (4,677 samples, 99.53%)</title><rect x="0.0851%" y="277" width="99.5318%" height="15" fill="rgb(239,152,38)" fg:x="4" fg:w="4677"/><text x="0.3351%" y="287.50">bitbeat::Machine::run</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (11 samples, 0.23%)</title><rect x="99.3828%" y="261" width="0.2341%" height="15" fill="rgb(249,139,47)" fg:x="4670" fg:w="11"/><text x="99.6328%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.09%)</title><rect x="99.5318%" y="245" width="0.0851%" height="15" fill="rgb(244,64,35)" fg:x="4677" fg:w="4"/><text x="99.7818%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="99.5531%" y="229" width="0.0638%" height="15" fill="rgb(216,46,15)" fg:x="4678" fg:w="3"/><text x="99.8031%" y="239.50"></text></g><g><title>bitbeat::Process::step (15 samples, 0.32%)</title><rect x="99.6169%" y="277" width="0.3192%" height="15" fill="rgb(250,74,19)" fg:x="4681" fg:w="15"/><text x="99.8669%" y="287.50"></text></g><g><title>all (4,699 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="4699"/><text x="0.2500%" y="431.50"></text></g><g><title>start (4,698 samples, 99.98%)</title><rect x="0.0213%" y="405" width="99.9787%" height="15" fill="rgb(242,149,17)" fg:x="1" fg:w="4698"/><text x="0.2713%" y="415.50">start</text></g><g><title>main (4,696 samples, 99.94%)</title><rect x="0.0638%" y="389" width="99.9362%" height="15" fill="rgb(244,29,21)" fg:x="3" fg:w="4696"/><text x="0.3138%" y="399.50">main</text></g><g><title>std::rt::lang_start (4,696 samples, 99.94%)</title><rect x="0.0638%" y="373" width="99.9362%" height="15" fill="rgb(220,130,37)" fg:x="3" fg:w="4696"/><text x="0.3138%" y="383.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (4,696 samples, 99.94%)</title><rect x="0.0638%" y="357" width="99.9362%" height="15" fill="rgb(211,67,2)" fg:x="3" fg:w="4696"/><text x="0.3138%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (4,695 samples, 99.91%)</title><rect x="0.0851%" y="341" width="99.9149%" height="15" fill="rgb(235,68,52)" fg:x="4" fg:w="4695"/><text x="0.3351%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4,695 samples, 99.91%)</title><rect x="0.0851%" y="325" width="99.9149%" height="15" fill="rgb(246,142,3)" fg:x="4" fg:w="4695"/><text x="0.3351%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,695 samples, 99.91%)</title><rect x="0.0851%" y="309" width="99.9149%" height="15" fill="rgb(241,25,7)" fg:x="4" fg:w="4695"/><text x="0.3351%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::_fib (4,695 samples, 99.91%)</title><rect x="0.0851%" y="293" width="99.9149%" height="15" fill="rgb(242,119,39)" fg:x="4" fg:w="4695"/><text x="0.3351%" y="303.50">bitbeat::_fib</text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.06%)</title><rect x="99.9362%" y="277" width="0.0638%" height="15" fill="rgb(241,98,45)" fg:x="4696" fg:w="3"/><text x="100.1862%" y="287.50"></text></g></svg></svg>